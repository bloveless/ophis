name: Release

on:
  push:
    tags:
      - "v*" # Trigger the workflow on any tag starting with 'v'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to get all tags and commits

      # Set up Go and run preflight
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Smoke test
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
          make
          git diff --exit-code go.mod go.sum

      # Generate changelog
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          CURRENT_TAG=${{ github.ref_name }}
          
          # If this is the first tag, compare against initial commit
          if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$CURRENT_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Generate commit messages since last tag
          CHANGELOG=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..$CURRENT_TAG" 2>/dev/null || git log --pretty=format:"- %s" "$PREVIOUS_TAG..HEAD")
          
          # If no commits found, provide a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Initial release"
          fi
          
          # Create the release body directly in the GitHub output
          {
            echo "RELEASE_BODY<<EOF"
            echo "## Changes in $CURRENT_TAG"
            echo ""
            echo "$CHANGELOG"
            echo ""
            echo "## Import"
            echo ""
            echo "\`\`\`bash"
            echo "go get github.com/njayp/ophis@$CURRENT_TAG"
            echo "\`\`\`"
            echo ""
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.RELEASE_BODY }}
          draft: false
          prerelease: false
          #files: |
          #  bin/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
